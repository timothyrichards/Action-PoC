// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#nullable enable

using System;
using SpacetimeDB.ClientApi;
using System.Collections.Generic;
using System.Runtime.Serialization;

namespace SpacetimeDB.Types
{
    public sealed partial class RemoteReducers : RemoteBase
    {
        public delegate void MovePlayerHandler(ReducerEventContext ctx, DbVector3 position, DbVector3 rotation, DbVector2 lookDirection, DbAnimationState animationState);
        public event MovePlayerHandler? OnMovePlayer;

        public void MovePlayer(DbVector3 position, DbVector3 rotation, DbVector2 lookDirection, DbAnimationState animationState)
        {
            conn.InternalCallReducer(new Reducer.MovePlayer(position, rotation, lookDirection, animationState), this.SetCallReducerFlags.MovePlayerFlags);
        }

        public bool InvokeMovePlayer(ReducerEventContext ctx, Reducer.MovePlayer args)
        {
            if (OnMovePlayer == null) return false;
            OnMovePlayer(
                ctx,
                args.Position,
                args.Rotation,
                args.LookDirection,
                args.AnimationState
            );
            return true;
        }
    }

    public abstract partial class Reducer
    {
        [SpacetimeDB.Type]
        [DataContract]
        public sealed partial class MovePlayer : Reducer, IReducerArgs
        {
            [DataMember(Name = "position")]
            public DbVector3 Position;
            [DataMember(Name = "rotation")]
            public DbVector3 Rotation;
            [DataMember(Name = "look_direction")]
            public DbVector2 LookDirection;
            [DataMember(Name = "animation_state")]
            public DbAnimationState AnimationState;

            public MovePlayer(
                DbVector3 Position,
                DbVector3 Rotation,
                DbVector2 LookDirection,
                DbAnimationState AnimationState
            )
            {
                this.Position = Position;
                this.Rotation = Rotation;
                this.LookDirection = LookDirection;
                this.AnimationState = AnimationState;
            }

            public MovePlayer()
            {
                this.Position = new();
                this.Rotation = new();
                this.LookDirection = new();
                this.AnimationState = new();
            }

            string IReducerArgs.ReducerName => "move_player";
        }
    }

    public sealed partial class SetReducerFlags
    {
        internal CallReducerFlags MovePlayerFlags;
        public void MovePlayer(CallReducerFlags flags) => MovePlayerFlags = flags;
    }
}
